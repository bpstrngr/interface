Ecmascript module interface for clients/imports/functions. 

Loading modules requires 3 steps: 
 1. locate (download, bundle and delete source if not found despite entry, or just redirect if bundling in progress), 
 2. access (+interpret and serialize if foreign dialect recognised or specified), 
 3. modularise (splitting "load" into access + modularise with an implementation using "vm" module is a pending feature). 
 (4. test, if the namespace exposes cases for itself). 
 (5. infer arguments if provided by client). 

The semantically flexible javascript platform has been commonly constrained by several 
syntactic/semantic variations in its ecosystem (commonjs, flow, typescript, jsx, purescript etc.) 
that have required growing amounts of configuration and compilation from you to manage. 

To compound this, package managers (npm, yarn etc.) obscure the dependency graphs of external libraries too. 
Distributing source format definitions for them instead of reducing your control to simple version tracking in package.json 
enables moderating their content, restoring transparency, integrity, re-enforcing standards and saving workspace. 

With the advent of a modular loader interface in the node.js implementation, 
these dialects can finally be compiled (and tested) dynamically and deterministically, 
without a need for volatile configurations or a new platform bloated by heterogeneity (deno, bun). 

Although ecmascript allows polluting modules with procedures, it is advised to keep them modular. 
Doing so leaves us without access to invoke their functions, hence this module 
extends the 3 steps with an inference of arguments provided by a client (shell/function). 

Keeping the scope of these functions pure and specific makes them composable, 
for which you can find generic combinators in the inference module. 

Examples: 
 node ./Blik_2023_interface.js ./Blik_2023_search.js sum 1 2 3;
 node --loader=./Blik_2023_interface.js ./Blik_2023_search.js sum 1 2 3; # node.js 16
 node --import=./Blik_2023_interface.js ./Blik_2023_search.js sum 1 2 3; # node.js 20.7.0
 node --import 'data:text/javascript;import("module").then(({register})=>register("./Blik_2023_interface.js",{parentURL:pathToFileURL("./")}));' ./Blik_2023_search.js sum 1 2 3; # node.js 20.7.0
 node --import=./Blik_2023_interface.js --experimental-detect-module ./Blik_2023_search.js sum 1 2 3; # node.js 21.1.0
 node --import=./Blik_2023_interface.js ./Blik_2023_search.js sum 1 2 3; # node.js 21.x
 import("./Blik_2023_interface.js").then(({resolve})=>resolve("./Blik_2023_search.js","sum",1,2,3));
 http.on("request",({path,query},response)=>resolve(path,...query).then(body=>response.send({body})));

Due to lack of loader, git or vm modules, browser clients can only control interpretation and serialization: 
 let resolve=either(import(module),compose(file,{method:"get"},fetch,"text",interpret,options,serialize,"body",describe,{method:"post"},merge,infer.bind(module),fetch,import));
 resolve(module);

The flags in the examples extend the interface to every import call (available from nodejs 16). 
Note that before nodejs 21.1, you need a package.json file to determine module type: echo '{"type":"module"}'>package.json;
For the other cases, external modules can be resolved in advance: 
 for file in $(echo sources.json | jq .keys --raw-output);do node ./Blik_2023_interface.js ./Blik_2023_interface.js resolve $file;done;
 for file in $(git ls-tree --full-tree --name-only -r HEAD);do node ./Blik_2023_interface.js ./Blik_2023_interface.js resolve $file;done;

Source definitions map files to entry points (local or remote address and version, supporting sparse-checkout of monorepos), patches and 
format specifications (currently supporting rollup plugins, but options for a modular parser/serializer are evolving, such as syntax, alias, replace - the latter only applies to bundle output, not internal loading): 
 {"module.js":"path/index.js"};
 {"module.js":["path/index.js",{plugin:{option:"setting"},syntax:"commonjs",output:{paths:{specifier:"path"}}}]};
 {"module.js":{"protocol://domain/author/module":["index.js","index2.js"]}};
 {"module.js":{"protocol://domain/author/module/tarball/branch":["path/index.js"]}};
 {"module.js":{"protocol://domain/author/module":{"branch or tag":["path/index.js","../../module.patch"]}}};
 {"module.js":{"protocol://domain/author/module/sparse/checkout/path":{"branch or tag":["path/index.js"]}}};
Locally available modules (self-hosted or checked out remotes) are loaded in memory, remotes get bundled and erased. 

Modules get tested (inferred on a scope/context, and composed with further terms and a condition) after modularisation if they expose a "tests" object: 
 export var tests=
 {member:{in:{namespace:{description:{scope:optional,context:[],terms:[],condition:[]}}}}
 };

To test manually: 
 node ./Blik_2023_interface.js ./Blik_2023_meta.js test "module.ts";

To format/compile between different dialects, substitute modularisation with persistence: 
 compose(access,"typescript",parse,"prettier",serialize,tether("module.ts"),persist)("module.ts");
 node ./Blik_2023_interface.js ./Blik_2023_interface.js access "module.ts" | xargs -0multiline \
 node ./Blik_2023_interface.js ./Blik_2023_interface.js parse $multiline "typescript" | xargs -0multiline\
 node ./Blik_2023_interface.js ./Blik_2023_interface.js serialize $multiline "prettier" |\
 node ./Blik_2023_interface.js ./Blik_2023_interface.js access "module.ts";

Copy pre-commit hook to format and test staged modules before each commit: 
 cp git_hook_pre-commit .git/hooks/pre-commit;

Copy post-commit hook to restage your local formatting stashed by pre-commit: 
 cp git_hook_post-commit .git/hooks/post-commit;

Uninstall dependencies (make sure no files you need have been gitignored): 
 rm -rf $(git check-ignore *);

Installing Node.js: 
 which node;
if [ $? -eq 1 ];then 
 version="20.5.1";
 release=node-v$version-$(uname|tr '[:upper:]' '[:lower:]')-$([[ $(uname -m) -eq aarch64 ]] && echo "arm64" || uname -m );
 curl -O https://nodejs.org/download/release/v$version/$release.tar.gz;
 tar xf $release.tar.gz -C . --strip-components=2 $release/bin/node;
 rm $release;
for command in node;do 
 alias $command=$(pwd)/$command;
done;
fi;

Uninstall Node.js: 
 rm node;

Install git: 
 ...

Uninstall git: 
 ...

*
(One conditional procedure is an exception in "interface.js" 
 to support backward compatibility of client command inference before loader modules, 
 but it remains idle without arguments from the client.) 

Issues: 
 Handle potential resolution failure in dependencies being loaded from source during bundling, in case it concludes with a purge sooner. 
 It may produce inconsistencies in other dependencies being interrupted in download/bundle, which makes full cleanup (check-ignore, rm ls -d */, see above) recommended until a solution. 
 Haverbeke_2012_acorn loaded from bundle after successful load from source produces anomalous syntaxerrors. 
 Re-running with the bundle thereby present doesn't reproduce the problem. could be an issue with acorn-typescript's reliance on stale states... 
 Fix modularisation of sources to support module loading without nodejs's native loader module. update references to it in this readme after. 
 Make decompress function more declarative (concise). 
 Swap Acorn's plugin-system for a composable parser to release acorn-typescript plugin dependency (compilers written in the language it compiles constitute a new platform. No native compiler exists for typescript). 
 Define typescript semantics for that new parser so it can be merged in its composition as needed (as well as for jsx, flow, etc.). 
 Establish functional type check convention to lint them without introduction of heterogenous (non-lexical) syntax (typescript, jsdocs etc.). 
